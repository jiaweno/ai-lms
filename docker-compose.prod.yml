version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-lms-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - ai-lms-prod-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ai-lms-redis-prod
    volumes:
      - redis_prod_data:/data
    networks:
      - ai-lms-prod-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-lms-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - ai-lms-prod-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ai-lms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend_dist:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - ai-lms-prod-network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:
  frontend_dist:

networks:
  ai-lms-prod-network:
    driver: bridge
